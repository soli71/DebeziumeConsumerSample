version: '3.8'
name: kafka-infra

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    # volumes:
    #   - zookeeper-data:/var/lib/zookeeper/data:Z
    #   - zookeeper-log:/var/lib/zookeeper/log:Z
    networks:
      - kafka

  broker:
    image: confluentinc/cp-kafka:7.4.3
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "30092:30092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    # volumes:
    #   - kafka-data:/var/lib/kafka/data:Z
    networks:
      - kafka

  debezium:
    image: debezium/connect:1.9
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      ENABLE_DEBEZIUM_SCRIPTING: true
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://debezium:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.3
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    links:
      - zookeeper
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
      - KAFKA_BROKERCONNECT=broker:9092
    networks:
      - kafka

  debezium-ui:
    image: debezium/debezium-ui:2.5
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    user: root
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '9999:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    volumes:
      - ./add-connectors-to-debezium.sh:/add-connectors-to-debezium.sh
      - ./debezium-connector-config.json:/debezium-connector-config.json
    entrypoint: /bin/sh -c
    command: ./add-connectors-to-debezium.sh
    networks:
      - kafka

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
    - 14333:1433
    environment:
    - ACCEPT_EULA=Y
    - MSSQL_PID=Standard
    - SA_PASSWORD=Password!
    - MSSQL_AGENT_ENABLED=true
    command:
    - /bin/bash
    - -c 
    - |
      # Launch MSSQL and send to background
      /opt/mssql/bin/sqlservr &
      # Wait 30 seconds for it to be available
      # (lame, I know, but there's no nc available to start prodding network ports)
      sleep 30
      # Run every script in /scripts
      # TODO set a flag so that this is only done once on creation, 
      #      and not every time the container runs
      /opt/mssql-tools/bin/sqlcmd -U sa -P Password! -l 30 -e -i /opt/mssql-tools/bin/sql-outbox-generator.sql
      # So that the container doesn't shut down, sleep this thread
      sleep infinity
    # command: ./opt/mssql-tools/bin/sqlcmd -U sa -P Password! -i ./opt/mssql-tools/bin/sql-outbox-generator.sql
    # volumes:
    #   - ./sql-outbox-generator.sql:/scripts/
    volumes: 
      - ./sql-outbox-generator.sql:/opt/mssql-tools/bin/sql-outbox-generator.sql
    networks:
      - kafka

networks:
  kafka:
    driver: bridge

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local



